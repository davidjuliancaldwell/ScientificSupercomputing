# -*- coding: utf-8 -*-
"""
Created on Wed Apr 20 10:10:53 2016

@author: djcald
"""
import math
import numpy as np
import matplotlib.pyplot as plt


# define Poisson and Gaussian function


def gaussianPDF(x,mu,sigma):

    gp = (1/(sigma*math.sqrt(math.pi*2)))*math.exp(-(x-mu)**2/(2*(sigma**2)))
    
    return gp

def poissonPDF(n,lamb):
    
    pn = (lamb**n)*(math.exp(-lamb))/math.factorial(n)
    return pn
# vectorize them for use with numpy arrays
    
vG = np.vectorize(gaussianPDF)
vP = np.vectorize(poissonPDF)

# define nextPoisson, which gives a random variable with a PDF that is 
# described by the Poisson Distribution - rejection method 

def nextPoisson(lamb):
    MAX_ATTEMPTS = 10**4
    n = 0
    x_max = lamb*10
    p_max = 1
    while (n < MAX_ATTEMPTS):
        x0 = np.floor(np.random.uniform()*x_max)
        y0 = np.random.uniform()*p_max
        if (y0 < poissonPDF(x0,lamb)):
            return x0
        else:
            n = n+1
    raise Exception("Number not found")
# call the function 

TOTAL_NUM_POINTS = 10**3
pointsP = []
lamb = 10 

for i in range(TOTAL_NUM_POINTS):
    x0 = nextPoisson(lamb)
    #val = poissonPDF(x0,lamb)
    pointsP.append(x0)


# plot it as a histogram with unit bin width

plt.figure(1)
binwidth = 1
count, bins, ignored = plt.hist(pointsP,bins=np.arange(0, max(pointsP) + binwidth, binwidth))

# plot N*P(n) as well 

n = np.arange(0,max(pointsP)+1,1)

plt.plot(n,TOTAL_NUM_POINTS*vP(n,10),lw=4,color='red')

plt.ylabel('Histogram Count or N*P(n)')
plt.xlabel('n')
plt.title('Histogram of Poisson random numbers generated by Rejection method vs. N*P(N), N=10**6')
label = ['N*P(n)','histogram']
plt.legend(label,numpoints=1)

# Box - muller, Gaussian 
# In order to go from standard normal distribution to a different one
# X = Z*sigma + mu
plt.figure(2)


def nextGaussian(mu,sigma):
    u1 = np.random.uniform()
    u2 = np.random.uniform()
    
    x0 = np.sqrt(-2*np.log(1-u1))*np.cos(2*np.pi*u2)
    
    Z = x0*sigma + mu
    
    return Z

TOTAL_NUM_POINTS = 10**3
pointsG = []
mu = 0
sigma = 10

for i in range(TOTAL_NUM_POINTS):
    x0 = nextGaussian(mu, sigma)
    #val = poissonPDF(x0,lamb)
    pointsG.append(x0)

count, bins, ignored = plt.hist(pointsG,bins=np.arange(min(pointsG) - binwidth, max(pointsG) + binwidth, binwidth))


n = np.arange(min(pointsG),max(pointsG),0.001)


plt.plot(n,TOTAL_NUM_POINTS*vG(n,0,10),lw=4,color='red')

plt.ylabel('Histogram Count or N*P(x)')
plt.xlabel('x')
plt.title('Histogram of Gaussian random numbers generated By Box Muller method vs. N*P(n), N=10**6')
label = ['N*P(n)','histogram']
plt.legend(label,numpoints=1)


plt.show()